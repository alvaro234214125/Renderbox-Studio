---
import Mail from "lucide-static/icons/mail.svg?raw";
import Phone from "lucide-static/icons/phone.svg?raw";
import MapPin from "lucide-static/icons/map-pin.svg?raw";
import Icon from "../ui/Icon.astro";

const contactInfo = [
  {
    icon: Mail,
    label: "Email",
    value: "info.renderbox.studio@gmail.com",
    href: "mailto:info.renderbox.studio@gmail.com",
  },
  {
    icon: Phone,
    label: "Teléfono",
    value: "+51 953 212 812",
    href: "tel:+51953212812",
  },
  {
    icon: MapPin,
    label: "Ubicación",
    value: "Lima, Perú",
    href: "",
  },
];
---

<section id="contacto" class="py-16 sm:py-20 lg:py-24 scroll-mt-10">
  <div class="container mx-auto px-6 sm:px-6 md:px-20 lg:px-20">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10 lg:gap-16 items-start">

      <!-- Columna Izquierda -->
<div class="flex flex-col items-center md:items-start text-center md:text-left">
  <!-- Bloque de título y descripción (centrado en móvil) -->
  <div class="w-full">
    <h2 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 leading-tight mb-6">
      ¿Tienes un proyecto en mente? <br />
      <span class="inline-flex items-center justify-center bg-indigo-500 rounded-md px-1 sm:px-2 h-10 sm:h-14 text-white pb-1">
        Hablemos.
      </span>
    </h2>

    <p class="text-base sm:text-lg text-gray-700 mb-10 max-w-xl mx-auto md:mx-0">
      Estamos listos para escuchar tus ideas y ayudarte a transformarlas en una solución digital exitosa. Completa el formulario o contáctanos directamente.
    </p>
  </div>

  <!-- Contact Info (SIEMPRE alineado a la izquierda) -->
<div class="space-y-6 w-full text-left flex flex-col items-start">
  {contactInfo.map(item => (
    <a href={item.href} class="flex items-center gap-4 group w-full">
      <div class="bg-gray-100 p-3 rounded-lg group-hover:bg-indigo-100 transition-colors flex-shrink-0">
        <Icon icon={item.icon} class="h-6 w-6 text-indigo-500" />
      </div>
      <div class="flex-1 min-w-0">
        <p class="font-semibold text-gray-600 text-sm sm:text-base">{item.label}</p>
        <p class="font-medium text-gray-900 group-hover:text-indigo-500 transition-colors text-sm sm:text-lg break-words">
          {item.value}
        </p>
      </div>
    </a>
  ))}
</div>
</div>


      <!-- Columna Derecha: Formulario -->
      <div class="bg-gray-50/80 backdrop-blur-sm border border-gray-200/80 p-8 rounded-2xl shadow-sm">
  <form 
    name="contact"
    method="POST"
    data-netlify="true"
    netlify-honeypot="bot-field"
    class="space-y-6"
    id="contact-form"
    netlify,
  >
    <input type="hidden" name="form-name" value="contact" />
    <p class="hidden">
      <label>No llenar este campo: <input name="bot-field" /></label>
    </p>

    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        required 
        class="w-full px-4 py-3 text-sm sm:text-base border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-indigo-500 outline-none transition-shadow"
      />
    </div>

    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Teléfono</label>
      <input type="tel" id="phone" name="phone" placeholder="+51 9XX XXX XXX" required class="..." />
    </div>

    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
      <input 
        type="email" 
        id="email" 
        name="email"  
        class="w-full px-4 py-3 text-sm sm:text-base border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-indigo-500 outline-none transition-shadow"
      />
    </div>

    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Mensaje</label>
      <textarea 
        id="message" 
        name="message" 
        rows="4" 
        required 
        class="w-full px-4 py-3 text-sm sm:text-base border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-indigo-500 outline-none transition-shadow"
      ></textarea>
    </div>

    <div>
      <button 
        type="submit" 
        class="w-full bg-indigo-500 text-white px-8 py-3 sm:py-4 rounded-full font-semibold text-base sm:text-lg hover:bg-indigo-700 transition-colors duration-300 shadow-lg"
      >
        Enviar Mensaje
      </button>
    </div>

    <!-- Mensaje de confirmación -->
    <p
  id="form-success"
  class="hidden mx-auto mt-6 max-w-md rounded-xl border border-green-400 bg-green-50 text-green-800 px-5 py-3 text-center font-semibold shadow-sm transition-all duration-500"
  role="status"
  aria-live="polite"
>
  <span class="inline-flex items-center gap-2 justify-center">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
      <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
    </svg>
    <span>Mensaje enviado correctamente. ¡Gracias por contactarnos!</span>
  </span>
</p>

<p id="form-error" class="hidden text-red-600 text-center font-medium mt-4" role="alert" aria-live="assertive"></p>

  </form>
</div>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') || document.querySelector("form[name='contact']");
    if (!form) {
      console.warn('[Contact] No se encontró el formulario (id="contact-form" o name="contact")');
      return;
    }

    const successEl = document.getElementById('form-success');
    const errorEl = document.getElementById('form-error');

    // Helper para mostrar mensajes
    function showSuccess(msg = '✅ Mensaje enviado correctamente. ¡Gracias por contactarnos!', timeout = 6000) {
      if (!successEl) return;
      successEl.textContent = msg;
      successEl.classList.remove('hidden');
      errorEl && (errorEl.classList.add('hidden'));
      if (timeout > 0) {
        setTimeout(() => successEl.classList.add('hidden'), timeout);
      }
    }

    function showError(msg = 'Ocurrió un error al enviar el formulario. Inténtalo nuevamente.') {
      if (!errorEl) return;
      errorEl.textContent = msg;
      errorEl.classList.remove('hidden');
      successEl && (successEl.classList.add('hidden'));
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Si tienes un honeypot, revisarlo rápido (opcional)
      const botField = form.querySelector('[name="bot-field"]');
      if (botField && botField.value) {
        // Spam sospechoso: simplemente no procesar
        return;
      }

      const formData = new FormData(form);

      // Asegurarse que existe input hidden form-name (Netlify)
      if (!form.querySelector('input[name="form-name"]')) {
        formData.append('form-name', form.getAttribute('name') || 'contact');
      }

      const body = new URLSearchParams();
      for (const pair of formData.entries()) {
        body.append(pair[0], pair[1]);
      }

      try {
        const res = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: body.toString(),
        });

        if (res.ok) {
          showSuccess();
          form.reset();
        } else {
          // Leer texto de respuesta para debug si hay cuerpo
          let text = '';
          try { text = await res.text(); } catch (err) { /* ignore */ }
          console.error('[Contact] Netlify response error', res.status, text);
          showError('Hubo un error en el envío. Inténtalo de nuevo más tarde.');
        }
      } catch (err) {
        console.error('[Contact] Fetch error:', err);
        showError('Error de red. Verifica tu conexión e inténtalo otra vez.');
      }
    });
  });
</script>

    </div>
  </div>
</section>
