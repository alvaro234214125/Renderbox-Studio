<canvas
  id="neural-network-canvas"
  class="absolute top-0 left-0 w-full h-full z-0"
></canvas>

<script is:raw>
  class Particle {
    constructor(canvasWidth, canvasHeight) {
      this.canvasWidth = canvasWidth;
      this.canvasHeight = canvasHeight;
      this.x = Math.random() * this.canvasWidth;
      this.y = Math.random() * this.canvasHeight;
      this.size = Math.random() * 2 + 1;
      this.speedX = Math.random() * 1 - 0.5;
      this.speedY = Math.random() * 1 - 0.5;
    }

    update() {
      if (this.x > this.canvasWidth || this.x < 0) this.speedX = -this.speedX;
      if (this.y > this.canvasHeight || this.y < 0) this.speedY = -this.speedY;
      this.x += this.speedX;
      this.y += this.speedY;
    }

    draw(ctx) {
      ctx.fillStyle = '#818cf8'; // indigo-400
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  window.addEventListener('load', () => {
    const canvas = document.getElementById('neural-network-canvas');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let particlesArray = [];
    const numberOfParticles = 100;
    const connectDistance = 120;

    function setCanvasSize() {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
      init();
    }

    function init() {
      particlesArray = [];
      for (let i = 0; i < numberOfParticles; i++) {
        particlesArray.push(new Particle(canvas.width, canvas.height));
      }
    }

    function connect() {
      for (let a = 0; a < particlesArray.length; a++) {
        for (let b = a; b < particlesArray.length; b++) {
          const dx = particlesArray[a].x - particlesArray[b].x;
          const dy = particlesArray[a].y - particlesArray[b].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < connectDistance) {
            const opacity = 1 - distance / connectDistance;
            ctx.strokeStyle = `rgba(129, 140, 248, ${opacity})`; // indigo-400
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(particlesArray[a].x, particlesArray[a].y);
            ctx.lineTo(particlesArray[b].x, particlesArray[b].y);
            ctx.stroke();
          }
        }
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (const particle of particlesArray) {
        particle.update();
        particle.draw(ctx);
      }
      connect();
      requestAnimationFrame(animate);
    }

    setCanvasSize();
    animate();
    window.addEventListener('resize', setCanvasSize);
  });
</script>
<style is:global>
  #neural-network-canvas {
    pointer-events: none;
  }